@Library('shared-main')_
import com.ericom.jenkins.JiraUtils

def thereAreChanges = false
import java.time.*
import groovy.json.JsonOutput
def commitId = "7d2f9c945"
def jsonState
def isMaster = false
def kubeVersion
def ticketNumbers
pipeline {
    parameters {
        string(name: 'JCAC_BRANCH', defaultValue: params.JCAC_BRANCH ?:'', description: 'Branch in kube to check for changes')
    }
    agent any
    options {
        timestamps()
    }
    stages {
        stage('Checkout Repository') {
            steps {
                checkout(
                        [$class                           : 'GitSCM', quietOperation: true,
                            branches                         : [[name: "origin/${JCAC_BRANCH}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : [[$class: 'CleanCheckout']],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : [[credentialsId: 'gitsshkey', name: 'origin', url: 'git@github.com:RiyaChaubey/JCasCTest.git']]
                        ]
                )
            }
        }
        stage('Check actual changes') {
            steps {
                script {
                    try {
                        def previousCommit = "6ca1b69"
                        
                        if (previousCommit) {
                            sh """
                            echo Modified files:
                            git log --format='XXX: %H' --name-only -50 ${previousCommit}..HEAD  | grep -v XXX | sort | uniq
                            """
                            
                                def contributorsEmail = sh(script: "git log --format='%ae' -50 ${previousCommit}..HEAD | sort | uniq", returnStdout: true).trim().split('\n')
                                echo "Contributors: ${contributorsEmail}"
                                ticketNumbers = sh(script: "git log --format='%B' -50 ${previousCommit}..HEAD | grep -E -o '\\b(SHIELD|XCSB|PEZTE)-[0-9]+' | sort | uniq", returnStdout: true).trim().split('\n')
                                echo "Tickets: ${ticketNumbers}"
                                def prsNum = sh(script: """git log -50 ${previousCommit}..HEAD | grep "Merge pull request" | wc -l""", returnStdout: true).trim()
                                echo "Number of PRs: ${prsNum}"
                                // kubeVersion = readFile("version.txt").trim().replace('\n', '').replace('\r', '')
                                def jsonStateDict = [cases            : ticketNumbers,
                                                        "shield-build"   : "kube-mb-${BUILD_NUMBER}",
                                                        commitID         : commitId,
                                                        tags             : [],
                                                        detectedTickets  : ticketNumbers,
                                                        contributorsEmail: contributorsEmail,
                                                        prsNum           : "${prsNum}",
                                                        isMaster         : (isMaster ? "true" : "false"),
                                                        forRelease       : kubeVersion]
                                jsonState = JsonOutput.toJson(jsonStateDict)
                                echo "The state is: ${jsonState}"
                                writeFile file: 'cases.json', text: jsonState
                        } else {
                            echo 'Previous build exists, but not previous commit'
                        }
                    }
                     catch (Exception e) {
                        error "Checking commits fail: ${e.toString()}"
                    }
                }
            }
        }
        stage('Update tickets') {
            steps {
                script {
                        withCredentials([string(credentialsId: 'jiraApi', variable: 'password')]) {
                            sh """
                            export > /tmp/my_env.txt
                            # sleep 600 || true
                            pip3 install -r requirements.txt
                            python3 move_cases_to_ci_verified.py --jira_pwd ${password} --jiracases_filename ./cases.json --fixed_in_build 123-test
                            """
                            commentForTickets = "Added in version 123-test"
                        } //with Credentials
                        // try {
                        //     if (commentForTickets) {
                        //             withCredentials([string(credentialsId: 'jiraApi', variable: 'password')]) {
                        //                 def jiraUtils = new JiraUtils()
                        //                 echo "${ticketNumbers}"
                        //                 JiraUtils.JiraOpResult result = jiraUtils.addCommentToTickets(ticketNumbers as String[], password, commentForTickets)
                        //                 if (result.getResultStr()) {
                        //                     echo "Result of updating modTickets: ${result.getResultStr()}"
                        //                 }
                        //                 if (result.getLogMsg()) {
                        //                     echo "Logs of updating modTickets: ${result.getLogMsg()}"
                        //                 }
                        //                 if (result.getErrMsg()) {
                        //                     echo "Errors of updating modTickets: ${result.getErrMsg()}"
                        //                 }
                        //             } // withCredentials
                        //     } // if
                        // } catch (Exception e) {
                        //     echo "Failed adding comment: ${e.toString()}"
                        // }
                        // withCredentials([string(credentialsId: 'jiraApi', variable: 'password')]) {
                        //     def changesFile = 'changes-2.txt'
                        //     def ticketsIdsFile = "tickets-2.txt"
                        //     sh """
                        //     pip3 install -r requirements.txt
                        // python3 moveTicketsBetweenStates.py --fromState 'In Review' --toState 'Review/In Test' --password ${password} --changeLogFile ${changesFile} --ticketIDsFile ${ticketsIdsFile}
        
                        // """
                        // python3 moveTicketsBetweenStates.py --fromState 'Review/In Test' --toState Done --password ${password} --changeLogFile ${changesFile} --ticketIDsFile ${ticketsIdsFile}
                        
                        //     changesFile = 'changes-3.txt'
                        //     ticketsIdsFile = "tickets-3.txt"
                        //     sh """
                        //     pip3 install -r requirements.txt
                        // python3 moveTicketsBetweenStates.py --fromState CI-Verified --toState Resolved --password ${password} --changeLogFile ${changesFile} --ticketIDsFile ${ticketsIdsFile}
        
                        // """
                        }
                } // script
            }//steps
        }   
    }
}
